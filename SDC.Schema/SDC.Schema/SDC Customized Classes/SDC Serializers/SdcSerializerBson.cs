// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.1.0. www.xsd2code.com
//  </auto-generated>
//  Extensively modified rlm 2020_05_11
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Bson;
    //using J = System.Text.Bson;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;
    using System.Runtime.CompilerServices;

    public static partial class SdcSerializerBson<T> where T : ITopNode

    {
        private static JsonSerializer _serializerBson;
        private static JsonSerializer SerializerBson
        {
            get
            {
                if ((_serializerBson == null))
                {
                    _serializerBson = new JsonSerializer();
                }
                return _serializerBson;
            }
        }
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SdcEntityBase object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public static string SerializeBson<T>(T obj)
        {
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                BsonDataWriter bsonDataWriter = new BsonDataWriter(memoryStream);
                SerializerBson.Serialize(bsonDataWriter, obj);
                return Convert.ToBase64String(memoryStream.ToArray());
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes SdcEntityBase object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output SdcEntityBase object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeBson(string input, out T obj, out Exception exception)
        {
            exception = null;
            obj = default(T);
            try
            {
                obj = DeserializeBson(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeBson(string input, out T obj)
        {
            Exception exception = null;
            return DeserializeBson(input, out obj, out exception);
        }

        /// <returns>string XML value</returns>
        public static T DeserializeBson(string input)
        {
            MemoryStream memoryStream = null;
            try
            {
                byte[] data;
                data = Convert.FromBase64String(input);
                memoryStream = new MemoryStream(data);
                BsonDataReader bsonDataReader = new BsonDataReader(memoryStream);
                return SerializerBson.Deserialize<T>(bsonDataReader);
            }
            finally
            {
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        #endregion

        public static void SaveToFileBson<T>(string fileName, T obj)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = SerializeBson(obj);
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static T LoadFromFileBson(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();

				BaseType.ResetRootNode();
				T obj = DeserializeBson(dataString);
				BaseType.ResetRootNode();
				return obj;
			}
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}

#pragma warning restore